/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// MARK 数据定义
module org.apache.zookeeper.data {
    class Id {
        ustring scheme;
        ustring id;
    }
    class ACL {
        int perms;
        Id id;
    }
    // information shared with the client
    // REF: https://zookeeper.apache.org/doc/current/zookeeperProgrammers.html#sc_zkStatStructure
    class Stat {
        long czxid;      		// created zxid: The zxid of the change that caused this znode to be created.
        long mzxid;      		// last modified zxid: The zxid of the change that last modified this znode.
        long ctime;      		// created: The time in milliseconds from epoch when this znode was created.
        long mtime;      		// last modified: The time in milliseconds from epoch when this znode was last modified.
        int version;     		// version: The number of changes to the data of this znode.
        int cversion;    		// child version: The number of changes to the children of this znode.
        int aversion;   	 	// acl version: The number of changes to the ACL of this znode.
        long ephemeralOwner;	// owner id if ephemeral, 0 otw: The session id of the owner of this znode if the znode is an ephemeral node.
        					 	// If it is not an ephemeral node, it will be zero.
        int dataLength;  		// length of the data in the node
        int numChildren; 		// number of children of this node
        long pzxid;      		// last modified children: The zxid of the change that last modified children of this znode.
    }
    // information explicitly stored by the server persistently
    class StatPersisted {
        long czxid;      // created zxid
        long mzxid;      // last modified zxid
        long ctime;      // created
        long mtime;      // last modified
        int version;     // version
        int cversion;    // child version
        int aversion;    // acl version
        long ephemeralOwner; // owner id if ephemeral, 0 otw
        long pzxid;      // last modified children
    }

   // information explicitly stored by the version 1 database of servers 
   class StatPersistedV1 {
       long czxid; //created zxid
       long mzxid; //last modified zxid
       long ctime; //created
       long mtime; //last modified
       int version; //version
       int cversion; //child version
       int aversion; //acl version
       long ephemeralOwner; //owner id if ephemeral. 0 otw
    }
}

// MARK 协议请求响应定义
module org.apache.zookeeper.proto {
    class ConnectRequest {			// MARK 协议请求: 连接
        int protocolVersion;
        long lastZxidSeen;
        int timeOut;
        long sessionId; // MARK 为0时会创建会话, 非0时重打开会话
        buffer passwd;
    }
    class ConnectResponse { 
        int protocolVersion;
        int timeOut;
        long sessionId;
        buffer passwd;
    }
    class SetWatches {				// MARK 协议请求: 设置watch
        long relativeZxid;
        vector<ustring>dataWatches;
        vector<ustring>existWatches;
        vector<ustring>childWatches;
    }        
    class WatcherEvent {			// MARK 协议请求: watcher事件
        int type;  // event type
        int state; // state of the Keeper client runtime
        ustring path;
    }
    class RequestHeader {			// MARK 协议请求: 请求头部
        int xid;
        int type;
    }
    class MultiHeader {				// MARK 协议请求: 多操作请求头部
        int type;
        boolean done;
        int err;
    }
    class AuthPacket {				// MARK 协议请求: 验证包
        int type;
        ustring scheme;
        buffer auth;
    }
    class ReplyHeader {				// MARK 协议请求: 回复头部
        int xid;
        long zxid;
        int err;
    }
    class GetDataRequest {			// MARK 协议请求: 获取/设置数据请求
        ustring path;
        boolean watch;
    }
    class GetDataResponse {
        buffer data;
        org.apache.zookeeper.data.Stat stat;
    }
    class SetDataRequest {
        ustring path;
        buffer data;
        int version;
    }
    class SetDataResponse {
        org.apache.zookeeper.data.Stat stat;
    }
    class GetSASLRequest {			// MARK 协议请求: 获取/设置SASL请求
        buffer token;
    }
    class SetSASLRequest {
        buffer token;
    }
    class SetSASLResponse {
        buffer token;
    }
    class CreateRequest {			// MARK 协议请求: 创建节点请求
        ustring path;
        buffer data;
        vector<org.apache.zookeeper.data.ACL> acl;
        int flags;
    }
    class CreateResponse {
        ustring path;
    }    
    class DeleteRequest {			// MARK 协议请求: 删除节点请求
        ustring path;
        int version;
    }
    class GetChildrenRequest {		// MARK 协议请求: 获取子节点请求
        ustring path;
        boolean watch;
    }
    class GetChildrenResponse {
        vector<ustring> children;
    }    
    class GetChildren2Request {
        ustring path;
        boolean watch;
    }
    class GetChildren2Response {
        vector<ustring> children;
        org.apache.zookeeper.data.Stat stat;
    }
    class CheckVersionRequest {		// MARK 协议请求: 检查版本请求
        ustring path;
        int version;
    }
    class GetMaxChildrenRequest {	// MARK 协议请求: 获取/设置最大子节点数量请求
        ustring path;
    }
    class GetMaxChildrenResponse {
        int max;
    }
    class SetMaxChildrenRequest {
        ustring path;
        int max;
    }
    class SyncRequest {				// MARK 协议请求: 同步请求
        ustring path;
    }
    class SyncResponse {
        ustring path;
    }
    class GetACLRequest {			// MARK 协议请求: 获取/设置ACL请求
        ustring path;
    }
    class GetACLResponse {
        vector<org.apache.zookeeper.data.ACL> acl;
        org.apache.zookeeper.data.Stat stat;
    }    
    class SetACLRequest {
        ustring path;
        vector<org.apache.zookeeper.data.ACL> acl;
        int version;
    }
    class SetACLResponse {
        org.apache.zookeeper.data.Stat stat;
    }
    class ErrorResponse {			// MARK 协议请求: 错误响应
        int err;
    }
    class ExistsRequest {			// MARK 协议请求: exists请求
        ustring path;
        boolean watch;
    }
    class ExistsResponse {
        org.apache.zookeeper.data.Stat stat;
    }
}

// MARK 服务器群体信息定义
// MARK https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab1.0
module org.apache.zookeeper.server.quorum {
    // MARK used for the initial handshake between client and server
    class LearnerInfo {
        long serverid;
        int protocolVersion;
    }
    
    // MARK actual proposals communicated between follower and leader
    class QuorumPacket {
    	// 定义于org.apache.zookeeper.server.quorum.Leader, 见https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab1.0
        int type; 		// Request, Ack, Commit, Ping
        long zxid;
        buffer data; 	// Only significant when type is request
        vector<org.apache.zookeeper.data.Id> authinfo;
    }
}

// MARK 服务器持久化信息定义
module org.apache.zookeeper.server.persistence {
    class FileHeader {
        int magic;
        int version;
        long dbid;
    }
}

module org.apache.zookeeper.txn { // MARK 事务定义
    class TxnHeader { 			// MARK 事务头部
        long clientId;
        int cxid;
        long zxid;
        long time;
        int type;
    }
    class CreateTxnV0 {
        ustring path;
        buffer data;
        vector<org.apache.zookeeper.data.ACL> acl;
        boolean ephemeral;
    }
    class CreateTxn { 			// MARK 创建节点的事务
        ustring path;
        buffer data;
        vector<org.apache.zookeeper.data.ACL> acl;
        boolean ephemeral;
        int parentCVersion;
    }
    class DeleteTxn { 			// MARK 删除节点的事务
        ustring path;
    }
    class SetDataTxn { 			// MARK 设置节点数据的事务
        ustring path;
        buffer data;
        int version;
    }
    class CheckVersionTxn { 	// MARK 检查节点版本的事务
        ustring path;
        int version;
    }
    class SetACLTxn { 			// MARK 设置节点ACL的事务
        ustring path;
        vector<org.apache.zookeeper.data.ACL> acl;
        int version;
    }
    class SetMaxChildrenTxn { 	// MARK 设置最大子节点数量的事务
        ustring path;
        int max;
    }
    class CreateSessionTxn { 	// MARK 创建会话的事务
        int timeOut;
    }
    class ErrorTxn { 			// MARK 记录发生错误的事务
        int err;
    }
    class Txn { 				// MARK 事务
        int type;
        buffer data;
    }
    class MultiTxn { 			// MARK 多操作事务
        vector<org.apache.zookeeper.txn.Txn> txns;
    }
}
